buildscript {
    dependencies {
        classpath(deps.android_gradle_plugin)
        classpath(deps.kotlin.plugin)
        classpath(deps.kotlin.allopen)
        classpath(deps.kotlin.extensions)
        classpath(deps.navigation.safe_args_plugin)
        classpath("com.github.gfx.ribbonizer:ribbonizer-plugin:2.1.0")
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
    id "info.vividcode.android.sdk-manager" version "0.9.0"
    id "net.ltgt.errorprone" version "0.0.14"
    id "com.gladed.androidgitversion" version "0.4.5"
    id "com.github.kt3k.coveralls" version "2.8.2"
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "com.diffplug.gradle.spotless"
    id "com.vanniktech.android.junit.jacoco" version "0.13.0"
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-allopen"
apply plugin: "androidx.navigation.safeargs"
apply plugin: "com.github.gfx.ribbonizer"
apply from: "../config/quality.gradle"

def isCi = "true" == System.getenv("CI")
def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

coveralls.jacocoReportPath = "build/reports/coverage/google/debug/report.xml"

androidGitVersion {
    prefix = "v"
    codeFormat = "MMNNPPBBB"
}

android {
    compileSdkVersion = 28

    dexOptions {
        // Skip pre-dexing when running on a CI or when disabled via -Dpre-dex=false
        preDexLibraries = preDexEnabled && !isCi
    }

    defaultConfig {
        applicationId = "org.connectbot"
        versionName = androidGitVersion.name()
        versionCode = androidGitVersion.code()

        minSdkVersion(build_versions.min_sdk)
        targetSdkVersion(build_versions.target_sdk)

        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters = ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]
        }

        testApplicationId = "org.connectbot.tests"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments = [clearPackageData: "true"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        if (project.hasProperty("keystorePassword")) {
            release {
                storeFile file(property("keystoreFile"))
                storePassword property("keystorePassword")
                keyAlias property("keystoreAlias")
                keyPassword property("keystorePassword")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            shrinkResources = true
            minifyEnabled = true
            proguardFiles = files(getDefaultProguardFile("proguard-android.txt"), "proguard.cfg")

            if (project.hasProperty("keystorePassword")) {
                //noinspection GroovyAssignabilityCheck
                signingConfig = signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix = ".debug"
            testCoverageEnabled = !project.hasProperty("android.injected.invoked.from.ide")
        }
    }

    dataBinding { enabled = true }

    flavorDimensions("license")

    productFlavors {
        // This product flavor uses the Conscrypt library which is open
        // source and licensed under Apache 2.
        oss {
            dimension = "license"
            versionNameSuffix = "-oss"
            ndk {
                abiFilters = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
            }
        }

        // This product flavor uses the Google Play Services library for
        // ProviderInstaller. It uses Conscrypt under-the-hood, but the
        // Google Play Services SDK itself is not open source.
        google {
            dimension = "license"
            versionNameSuffix = ""
        }
    }

    testOptions {
        // temporarily disable the orchestrator as this breaks coverage: https://issuetracker.google.com/issues/72758547
        //execution "ANDROID_TEST_ORCHESTRATOR"
        animationsDisabled = true

        unitTests { includeAndroidResources = true }
    }

    lintOptions {
        abortOnError = false
        lintConfig = file("lint.xml")
    }

    packagingOptions {
        exclude("META-INF/LICENSE.txt")
        exclude("LICENSE.txt")
        exclude("**/*.gwt.xml")
    }

    externalNativeBuild { cmake { path = "CMakeLists.txt" } }

    jacoco {
        if (rootProject.hasProperty("jacocoVersion")) {
            version = "${rootProject.jacocoVersion}"
        }
    }
}

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation("org.connectbot.testing.OpenClass")
}

spotless {
    java {
        target = files("**/*.java")
        removeUnusedImports()
    }

    kotlin {
        target = files("**/*.kt")
        ktlint().userData(["indent_style": "tab", "indent_size": "1", "continuation_indent_size": "2", "trim_trailing_whitespace": "true", "insert_final_newline": "true"])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-Xep:ClassCanBeStatic:OFF",
            "-Xep:ClassNewInstance:OFF",
            "-Xep:DefaultCharset:OFF",
            "-Xep:SynchronizeOnNonFinalField:OFF",
            "-XepExcludedPaths:" +
                    ".*/app/src/main/java/de/mud/.*|" +
                    ".*/app/src/main/java/org/apache/.*|" +
                    ".*/app/src/main/java/org/keyczar/.*|" +
                    ".*/app/build/generated/.*",
    ]
}

/*
 * This works around a deficiency in ddmlib's 
 * com/android/ddmlib/AndroidDebugBridge.java where it doesn't support anything
 * other than 127.0.0.1 for the host of ADB. This allows us to run tests
 * in a Docker container but forward to a real device.
 */
import com.github.jengelman.gradle.plugins.processes.tasks.Fork

tasks.register("startAdbForwarding", Fork) {
    onlyIf { System.getenv("ANDROID_ADB_SERVER_ADDRESS") != null }

    def androidAdbServerAddress = System.getenv("ANDROID_ADB_SERVER_ADDRESS")
    commandLine = ["socat", "TCP-LISTEN:5037,reuseaddr,fork", "TCP:${androidAdbServerAddress}:5037"]
}

tasks.register("stopAdbForwarding") {
    onlyIf { System.getenv("ANDROID_ADB_SERVER_ADDRESS") != null }
    doLast {
        startAdbForwarding.processHandle.abort()
    }
}

afterEvaluate {
    tasks.configureEach { t ->
        if (t.name.startsWith("connected") && t.name.endsWith("AndroidTest")) {
            t.dependsOn(startAdbForwarding)
            t.finalizedBy(stopAdbForwarding)
        }
    }
}

// Do not want any release candidates for updates.
dependencyUpdates {
    revision = "release"
    checkForGradleUpdate = false
    outputFormatter = "json"

    // Android apparently marks their "alpha" as "release" so we have to reject them.
    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = [
                        "alpha",
                        "beta",
                        "rc",
                        "cr",
                        "m",
                        "preview"
                ].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release candidate")
                }
            }
        }
    }
}

dependencies {
    implementation(deps.connectbot.sshlib)
    googleImplementation(deps.gms.base)
    ossImplementation(deps.conscrypt)

    implementation(deps.support.annotations)
    implementation(deps.support.recyclerview)
    implementation(deps.support.v4)
    implementation(deps.support.app_compat)
    implementation(deps.support.preference)
    implementation(deps.support.preference_fix)
    implementation(deps.support.design)
    implementation(deps.lifecycle.extensions)
    implementation(deps.lifecycle.java8)
    implementation(deps.navigation.fragment_ktx)
    implementation(deps.navigation.ui_ktx)
    implementation(deps.room.runtime)

    implementation(deps.dagger.runtime)
    implementation(deps.dagger.android)
    implementation(deps.dagger.android_support)
    implementation(deps.constraint_layout)
    implementation(deps.kotlin.stdlib)

    implementation(deps.timber)
    implementation(deps.colorpicker)

    kapt(deps.dagger.android_support_compiler)
    kapt(deps.dagger.compiler)
    kapt(deps.room.compiler)
    kapt(deps.lifecycle.compiler)

    androidTestUtil(deps.atsl.orchestrator)

    androidTestImplementation(deps.atsl.ext_junit)
    androidTestImplementation(deps.atsl.rules)
    androidTestImplementation(deps.espresso.core)
    androidTestImplementation(deps.espresso.intents)
    androidTestImplementation(deps.espresso.contrib)
    androidTestImplementation(deps.support.app_compat)
    androidTestImplementation(deps.support.app_compat)
    androidTestImplementation(deps.support.recyclerview)
    androidTestImplementation(deps.navigation.testing)
    androidTestImplementation(deps.support.design)

    testImplementation(deps.junit)
    testImplementation(deps.atsl.core)
    testImplementation(deps.atsl.ext_junit)
    testImplementation(deps.room.testing)
    testImplementation(deps.arch_core.testing)
    testImplementation(deps.mockito.core)
    testImplementation(deps.mockito.kotlin)
    testImplementation(deps.assertj.core)
    testImplementation(deps.robolectric)
    testImplementation(deps.live_data_testing.core)
    testImplementation(deps.live_data_testing.ktx)
}
